/*
SQLyog Ultimate v11.11 (64 bit)
MySQL - 5.6.21-log : Database - crab
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`crab` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `crab`;

/*Table structure for table `crab_article` */

DROP TABLE IF EXISTS `crab_article`;

CREATE TABLE `crab_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` tinyint(4) NOT NULL,
  `img_id` int(11) DEFAULT NULL,
  `author` varchar(32) NOT NULL,
  `title` varchar(255) NOT NULL,
  `cate` varchar(32) NOT NULL,
  `content` text NOT NULL,
  `type` char(20) NOT NULL DEFAULT 'article',
  `from` varchar(255) DEFAULT NULL,
  `tags` varchar(150) DEFAULT NULL,
  `click_num` int(11) NOT NULL DEFAULT '0',
  `comment_num` smallint(6) NOT NULL DEFAULT '0',
  `praise` int(11) NOT NULL DEFAULT '0',
  `create_time` int(11) NOT NULL DEFAULT '0',
  `update` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Data for the table `crab_article` */

insert  into `crab_article`(`id`,`user_id`,`img_id`,`author`,`title`,`cate`,`content`,`type`,`from`,`tags`,`click_num`,`comment_num`,`praise`,`create_time`,`update`) values (2,1,NULL,'螃蟹在晨跑','说个温暖的故事给你听','电台','<p>小兔子要上床睡觉了；它紧紧抓著大兔子的长耳朵，要大兔子好好地听它说。</p><p>“猜猜我有多爱你？”小兔子问。</p><p>“噢！我大概猜不出来。”大兔子笑笑地说。</p><p>“我爱你这么多。”小兔子把手臂张开，开得不能再开。</p><p>大兔子有双更长的手臂，它张开来一比，说：“可是，我爱你这么多。”</p><p>小兔子动动右耳，想：嗯，这真的很多。</p><p>“我爱你，像我举的这么高，高得不能再高。”小兔子说，双臂用力往上撑举。</p><p>“我爱你，像我举的这么高，高得不能再高。”大兔子也说。</p><p>这真的很高，小兔子想：希望我的手臂可以像大兔子一样。</p><p>小兔子又有个好主意，它把脚顶在树干上倒立了起来。他说：“我爱你到我的脚趾头这么多。”</p><p>大兔子一把抓起小兔子的手，将它抛起来，飞得比它的头还高，说：“我爱你到你的脚趾头这么多。”</p><p>小兔子笑了起来，说：“我爱你像我跳得那么高，高得不能再高。”它跳过来又跳过去。</p><p>大兔子笑著说：“可是，我爱你，像我跳得这么高，高得不能再高。”他往上一跳，耳朵都碰到树枝了。</p><p>跳得真高哇－－小兔子想－－真希望我也可以跳得像它一样高。</p><p>小兔子大叫：“我爱你，一直到过了小路，在远远的河那边。”</p><p>大兔子说：“我爱你，一直到过了小河，越过山的那一边。”</p><p>小兔子想，那真的好远。它揉揉红红的两眼，开始困了，想不出来了；</p><p>它抬头看著树丛后面那一大片的黑夜，觉得再也没有任何东西比天空更远的了。</p><p>大兔子轻轻抱起频频打著呵欠的小兔子，小兔子闭上了眼睛，在进入梦乡前，喃喃说：“我爱你，从这里一直到月亮。”</p><p>“噢！那么远，”大兔子说。“真的非常远、非常远。”</p><p>大兔子轻轻将小兔子放到叶子铺成的床上，低下头来，亲亲它，祝它晚安。</p><p>然后，大兔子躺在小兔子的旁边，</p><p>小声地微笑著说：“我爱你，从这里一直到月亮，再……绕回来。”</p>','article','','nj小佳 大兔子 小兔子',120,0,0,1416126680,'2014-11-16 16:31:20'),(3,1,NULL,'螃蟹在晨跑','说个温暖的故事给你听','电台','<p>小兔子要上床睡觉了；它紧紧抓著大兔子的长耳朵，要大兔子好好地听它说。</p><p>“猜猜我有多爱你？”小兔子问。</p><p>“噢！我大概猜不出来。”大兔子笑笑地说。</p><p>“我爱你这么多。”小兔子把手臂张开，开得不能再开。</p><p>大兔子有双更长的手臂，它张开来一比，说：“可是，我爱你这么多。”</p><p>小兔子动动右耳，想：嗯，这真的很多。</p><p>“我爱你，像我举的这么高，高得不能再高。”小兔子说，双臂用力往上撑举。</p><p>“我爱你，像我举的这么高，高得不能再高。”大兔子也说。</p><p>这真的很高，小兔子想：希望我的手臂可以像大兔子一样。</p><p>小兔子又有个好主意，它把脚顶在树干上倒立了起来。他说：“我爱你到我的脚趾头这么多。”</p><p>大兔子一把抓起小兔子的手，将它抛起来，飞得比它的头还高，说：“我爱你到你的脚趾头这么多。”</p><p>小兔子笑了起来，说：“我爱你像我跳得那么高，高得不能再高。”它跳过来又跳过去。</p><p>大兔子笑著说：“可是，我爱你，像我跳得这么高，高得不能再高。”他往上一跳，耳朵都碰到树枝了。</p><p>跳得真高哇－－小兔子想－－真希望我也可以跳得像它一样高。</p><p>小兔子大叫：“我爱你，一直到过了小路，在远远的河那边。”</p><p>大兔子说：“我爱你，一直到过了小河，越过山的那一边。”</p><p>小兔子想，那真的好远。它揉揉红红的两眼，开始困了，想不出来了；</p><p>它抬头看著树丛后面那一大片的黑夜，觉得再也没有任何东西比天空更远的了。</p><p>大兔子轻轻抱起频频打著呵欠的小兔子，小兔子闭上了眼睛，在进入梦乡前，喃喃说：“我爱你，从这里一直到月亮。”</p><p>“噢！那么远，”大兔子说。“真的非常远、非常远。”</p><p>大兔子轻轻将小兔子放到叶子铺成的床上，低下头来，亲亲它，祝它晚安。</p><p>然后，大兔子躺在小兔子的旁边，</p><p>小声地微笑著说：“我爱你，从这里一直到月亮，再……绕回来。”</p>','article','','nj小佳 大兔子 小兔子',126,0,0,1416126716,'2014-11-16 16:31:56'),(7,1,NULL,'螃蟹在晨跑','说个温暖的故事给你听','电台','<p>小兔子要上床睡觉了；它紧紧抓著大兔子的长耳朵，要大兔子好好地听它说。</p><p>“猜猜我有多爱你？”小兔子问。</p><p>“噢！我大概猜不出来。”大兔子笑笑地说。</p><p>“我爱你这么多。”小兔子把手臂张开，开得不能再开。</p><p>大兔子有双更长的手臂，它张开来一比，说：“可是，我爱你这么多。”</p><p>小兔子动动右耳，想：嗯，这真的很多。</p><p>“我爱你，像我举的这么高，高得不能再高。”小兔子说，双臂用力往上撑举。</p><p>“我爱你，像我举的这么高，高得不能再高。”大兔子也说。</p><p>这真的很高，小兔子想：希望我的手臂可以像大兔子一样。</p><p>小兔子又有个好主意，它把脚顶在树干上倒立了起来。他说：“我爱你到我的脚趾头这么多。”</p><p>大兔子一把抓起小兔子的手，将它抛起来，飞得比它的头还高，说：“我爱你到你的脚趾头这么多。”</p><p>小兔子笑了起来，说：“我爱你像我跳得那么高，高得不能再高。”它跳过来又跳过去。</p><p>大兔子笑著说：“可是，我爱你，像我跳得这么高，高得不能再高。”他往上一跳，耳朵都碰到树枝了。</p><p>跳得真高哇－－小兔子想－－真希望我也可以跳得像它一样高。</p><p>小兔子大叫：“我爱你，一直到过了小路，在远远的河那边。”</p><p>大兔子说：“我爱你，一直到过了小河，越过山的那一边。”</p><p>小兔子想，那真的好远。它揉揉红红的两眼，开始困了，想不出来了；</p><p>它抬头看著树丛后面那一大片的黑夜，觉得再也没有任何东西比天空更远的了。</p><p>大兔子轻轻抱起频频打著呵欠的小兔子，小兔子闭上了眼睛，在进入梦乡前，喃喃说：“我爱你，从这里一直到月亮。”</p><p>“噢！那么远，”大兔子说。“真的非常远、非常远。”</p><p>大兔子轻轻将小兔子放到叶子铺成的床上，低下头来，亲亲它，祝它晚安。</p><p>然后，大兔子躺在小兔子的旁边，</p><p>小声地微笑著说：“我爱你，从这里一直到月亮，再……绕回来。”</p>','article','','nj小佳 大兔子 小兔子',24,0,0,1416067200,'2014-11-30 01:48:13'),(9,1,NULL,'螃蟹在晨跑','[转载]无论繁华还是寂然','转载','<p>候车大厅</p><p>“有什么打算？找个辅导员，简简单单的，多点时间把家里搞好多好！”一向踏实正经过日子的摩羯朝向我说。</p><p>不想做辅导员，志不在此。可是，话在嘴边却不敢说。</p><p>众目睽睽下，需要给个答案。</p><p>“不想做辅导员。”终于，轻轻地，我还是说了出来。“那你想干什么”，摩羯努力透出和蔼，但掩饰不住恨铁不成钢，“做生意？你有天赋吗？有本钱吗？”</p><p>天赋，这年头不比以往，任何一个普通人只要有才都可以一夜成名，赚得盆满钵盈。若有锋芒自会露出来了，我早因此暗自沮丧；成本亦不必说的，她了解我。</p><p>问题在于，我也不知怎么清楚表达出我想干嘛，因为我压根不清楚。也许我想工作，想轻松，想赚钱，想实现理想，又想把家人照顾好。</p><p>我就像那\"想站着把钱挣了\"的姜文。</p><p>想想着若像那潜伏期主内的李安，只有八千存款没有前途没有目标的梁家辉倒是好的，只是想想罢了。我们相同的无非是不知道该干嘛，不知道前途在哪里，结局只是偶然。</p><p>见气氛有点僵，双鱼连忙打圆场，“夏不是一直想闯闯的嘛！再说她不是开了个淘宝店嘛！”她越说声音越低，我连忙示意，这小破事不提也罢。</p><p>“闯、闯……你多大了，你有一姐的本事、干劲吗？能做成她那样的成就吗？”务实的金牛也看不下去了。</p><p>“一姐从来都不是我的目标，再说我多‘大’年纪了？才30出头而已，怎么就老了？”我面向金牛开始反击。</p><p>我必须这样，若沉默，眼泪立马就会夺眶而出，那样才更丢人。我不能让自己费尽心思修建的堡垒和铠甲溃不成军。</p><p>我稍微平静一下，没再说下去。关“心”则乱，若不关心，他们又怎会鸟我……</p><p>许是看我神色不对，金牛叹气作败下阵状，“好，好，我以后不会过分操你的心了。”在大家眼里，我该是多么不识时务的人呀！</p><p>想起前一晚，吃完喜酒的暗夜里。</p><p>卧谈很晚，金牛和双鱼卷极而眠，摩羯辗转反侧为我叫屈，“为什么他教训你，你不反击？他凭什么？”</p><p>为什么？因为不关“心”。因为他跟这些我在乎的星座妹子不一样。</p><p>因为懂得，所以慈悲。</p><p>有时候，我们需要的不是锦上添花，也不是雪中送炭，而是无论欢乐还是悲伤，繁华还是寂然，那个人一直都在。</p><p>【出自】苏夏</p>','article','http://www.jianshu.com/p/ddc5e2956379','繁华，寂然',30,0,0,1417886047,'2014-12-06 12:14:07'),(10,1,NULL,'螃蟹在晨跑','【转载】mysql 优化十个准则','add','<p>原则1：尽量避免在列上进行运算，这样会导致索引失效。</p><p>&nbsp; &nbsp; false：select * from t1 YEAD(d) &gt;= 2011;</p><p>&nbsp; &nbsp; true : select * from t1 YEAD(d) &gt;= \'2011-01-01\';</p><p>原则2: 使用join是，应该用小结果集驱动大结果集。同时把负责的join查询分成多个query。因为join多个表时可能导致更多的锁定和堵塞。</p><p>原则3：注意like模糊查询的使用，避免使用%xx%。</p><p>&nbsp; &nbsp; false：SELECT * FROM t WHERE name LIKE \'%de%\';</p><p>&nbsp; &nbsp; true : SELECT * FROM t WHERE name &gt;= \'de\' AND name &lt;= \'df\';</p><p>原则4：仅列出需要查询的字段，这对速度不会有明显的影响，主要考虑内存。</p><p>&nbsp; &nbsp; false：SELECT * FROM t1 ;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp; &nbsp; true : SELECT id,name,pwd FROM t1;</p><p>原则5： 使用批量插入语句节省交互。</p><p>&nbsp; &nbsp; false : {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;INSERT INTO t2&nbsp;(id,name) VALUES(1,\'B\');</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INSERT INTO t2&nbsp;(id,name) VALUES(2,\'d\');</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INSERT INTO t2&nbsp;(id,name) VALUES(3,\'g\');</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; }</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; true : INSERT INTO T2&nbsp;(id,name) VALUES(1,\'B\'),(2,d\'),(3,\'g\');&nbsp;</p><p>原则6：limie基数较大时使用between。</p><p>&nbsp; &nbsp; between限定比limit快，所以在海量数据访问时，建议用between或是where子句代替limit，但是between也有缺陷，就是，如果id中间断行，或是中间部分id不读取时，总读取的数量会少于预计数量。</p><p>原则7：不要使用rand（）函数获取多条随机记录</p><blockquote>使用php产生随机数，然后mysql用in查询<br>原则8：避免使用null<br>原则9：使用count（*）代替count（id）<br>原则10：不用做无谓的排序操作，而尽可能在索引中完成排序。<br></blockquote><p>mysql 的原子性操作</p><p>这给出了与列锁定类似的结果，但效果更好，使用相对于其当前值的值，仅更新了某些列。这意味着，典型的UPDATE语句与下面给出的类似：</p><p>　　UPDATE tablename SET pay_back=pay_back+125;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; UPDATE customer SET customer_date=\'current_date\', &nbsp;address=\'new address\', &nbsp;phone=\'new phone\', &nbsp;money_owed_to_us=money_owed_to_us-125</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 　 WHERE　customer_id=id AND address=\'old address\' AND phone=\'old phone\';</p><p>　　它很有效，即使其他客户端更改了pay_back或money_owed_to_us列中的值，也能使用。</p><p>　我们通常能使用代码来处理行级锁定方面的需求。在某些情况下，实际上不需要它，InnoDB表支持行级锁定。通过MyISAM表，能够在表中使用标志列，并完成类似下面的操作：</p><p>　　UPDATE tbl_name SET row_flag=1 WHERE id=ID;</p><p>　　如果找到行，而且原始行中的row_flag不是1，对于受影响的行数，MySQL返回1。</p><p>　　你可以认为MySQL将前述查询更改为：</p><p>　　UPDATE tbl_name SET row_flag=1 WHERE id=ID AND row_flag &lt;&gt; 1;</p><p>&nbsp; &nbsp; &nbsp;&nbsp;REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。&nbsp;</p><p>&nbsp; &nbsp; &nbsp;使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用DELETE和INSERT时添加事务等复杂操作了。</p><p>&nbsp; &nbsp; &nbsp;REPLACE INTO users (id,name,age) VALUES(123, \'赵本山\', 50);&nbsp;&nbsp;</p><p>【来自互联网】</p>','article','','mysql mysql优化',57,0,0,1418095857,'2014-12-08 22:30:57'),(11,1,NULL,'螃蟹在晨跑','mysql 分区','code','<p>通俗地讲表分区是将一大表，根据条件分割成若干个小表。mysql5.1开始支持数据表分区了。<br>如：某用户表的记录超过了600万条，那么就可以根据入库日期将表分区，也可以根据所在地将表分区。当然也可根据其他的条件分区。</p><p>&nbsp;</p><p>二、为什么要对表进行分区<br>为了改善大型表以及具有各种访问模式的表的可伸缩性，可管理性和提高数据库效率。</p><p>分区的一些优点包括：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1）、与单个磁盘或文件系统分区相比，可以存储更多的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）、对于那些已经失去保存意义的数据，通常可以通过删除与那些数据有关的分区，很容易地删除那些数据。相反地，在某些情况下，添加新数据的过程又可以通过为那些新数据专门增加一个新的分区，来很方便地实现。通常和分区有关的其他优点包括下面列出的这些。MySQL分区中的这些功能目前还没有实现，但是在我们的优先级列表中，具有高的优先级；我们希望在5.1的生产版本中，能包括这些功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3）、一些查询可以得到极大的优化，这主要是借助于满足一个给定WHERE语句的数据可以只保存在一个或多个分区内，这样在查找时就不用查找其他剩余的分区。因为分区可以在创建了分区表后进行修改，所以在第一次配置分区方案时还不曾这么做时，可以重新组织数据，来提高那些常用查询的效率。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4）、涉及到例如SUM()和COUNT()这样聚合函数的查询，可以很容易地进行并行处理。这种查询的一个简单例子如 “SELECT salesperson_id, COUNT (orders) as order_total FROM sales GROUP BY salesperson_id；”。通过“并行”，这意味着该查询可以在每个分区上同时进行，最终结果只需通过总计所有分区得到的结果。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5）、通过跨多个磁盘来分散数据查询，来获得更大的查询吞吐量。</p><p>三、分区类型</p><p>· RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区。 （一般推荐使用range分区）<br>· LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。&nbsp;<br>· HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。<br>· KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL 服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</p><ul><li>RANGE分区</li><li><br></li></ul><pre class=\"\">partition&nbsp;BY&nbsp;RANGE&nbsp;(store_id)&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition&nbsp;p0&nbsp;VALUES&nbsp;LESS&nbsp;THAN&nbsp;(1000000),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition&nbsp;p1&nbsp;VALUES&nbsp;LESS&nbsp;THAN&nbsp;(2000000),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition&nbsp;p2&nbsp;VALUES&nbsp;LESS&nbsp;THAN&nbsp;(3000000),&nbsp;&nbsp; &nbsp; partition&nbsp;p3&nbsp;VALUES&nbsp;LESS&nbsp;THAN&nbsp;(4000000) )； &nbsp;&nbsp;</pre><p>RANGE分区在如下场合特别有用：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）、&nbsp;当需要删除一个分区上的“旧的”数据时,只删除分区即可。如果你使用上面最近的那个例子给出的分区方案，你只需简单地使用 “ALTER TABLE employees DROP PARTITION p0；”来删除所有在1991年前就已经停止工作的雇员相对应的所有行。对于有大量行的表，这比运行一个如“DELETE FROM employees WHERE YEAR (separated) &lt;= 1990；”这样的一个DELETE查询要有效得多。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2）、想要使用一个包含有日期或时间值，或包含有从一些其他级数开始增长的值的列。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3）、经常运行直接依赖于用于分割表的列的查询。例如，当执行一个如“SELECT COUNT(*) FROM employees WHERE YEAR(separated) = 2000 GROUP BY store_id；”这样的查询时，MySQL可以很迅速地确定只有分区p2需要扫描，这是因为余下的分区不可能包含有符合该WHERE子句的任何记录。</p><p>注释：这种优化还没有在MySQL 5.1源程序中启用，但是，有关工作正在进行中。</p><ul><li>LIST分区</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LIST分区通过使用“PARTITION BY LIST(expr)”来实现，其中“expr” 是某列值或一个基于某个列值、并返回一个整数值的表达式，然后通过“VALUES IN (value_list)”的方式来定义每个分区，其中“value_list”是一个通过逗号分隔的整数列表。<br>注释：在MySQL 5.1中，当使用LIST分区时，有可能只能匹配整数列表。</p>','article','','myql分表  mysql',30,0,0,1418103117,'2014-12-09 00:31:57'),(12,1,NULL,'螃蟹在晨跑','sphinx + coreseek 安装整理','code','<p><strong>1、软件下载</strong></p><p><a href=\"http://sphinxsearch.com/downloads/release/\" target=\"_blank\">Sphinx</a>&nbsp;选source tarball。</p><p><a href=\"http://www.coreseek.cn/products-install/\" target=\"_blank\">coreseek</a></p><p><strong>2、安装Sphinx</strong></p><p>创建安装目录,并授权</p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> mkdir /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx\r\n$ sudo chmod -R <span style=\"background-color: inherit; color: rgb(0, 153, 153);\">777</span> /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx</pre><p>安装依赖包</p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> apt-<span style=\"background-color: inherit; font-weight: bold;\">get</span> install make gcc g++ automake libtool mysql-client libmysqlclient15-dev libxml2-dev libexpat1-dev</pre><p>安装</p><pre>$ tar zxvf sphinx-2.1.9-release.tar.gz\r\n$ cd sphinx-2.1.9-release\r\n$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span>  ./configure --prefix=/usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx  //prefix 指定安装目录，如果要安装mysql  加上 --<span style=\"background-color: inherit; font-weight: bold;\">with</span>-mysql\r\n$ sudo make &amp;&amp; make install</pre><p>关于sphinx的三个命令,目录是/usr/local/sphinx/bin</p><pre>indexer   <span style=\"background-color: inherit; color: rgb(153, 153, 136); font-style: italic;\">//生成索引</span>\r\nsearch    <span style=\"background-color: inherit; color: rgb(153, 153, 136); font-style: italic;\">//搜索</span>\r\nsearchd   <span style=\"background-color: inherit; color: rgb(153, 153, 136); font-style: italic;\">//启动sphinx</span></pre><p><strong>3、配置sphinx并使用</strong></p><p>生成配置文件</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>cd /usr/local/sphinx/etc\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo cp sphinx.conf.dist sphinx.conf</pre><p>将etc目录下example.sql文件导入到mysql test数据库。 更改sphinx.conf,主要更改myql用户名和密码</p><p>生成索引</p><pre><font color=\"#333333\" style=\"background-color: inherit;\">$ su</font><span style=\"background-color: inherit; color: rgb(51, 51, 51); font-weight: bold;\">do</span><font color=\"#ff0000\" style=\"background-color: inherit;\"> /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx/bin/indexer --<span style=\"background-color: inherit; font-weight: bold;\">all(not exit)</span></font></pre><p>如果爆出以下错误</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">ERROR</span>: <span style=\"background-color: inherit; color: rgb(221, 17, 68);\">index \'test1stemmed\': sql_connect: Can\'t connect to local MySQL server through socket \'/var/run/mysqld/mysqld.sock\'</span></pre><p>则可能是因为mysql.sock的位置问题，在本机中，改位置是/tmp/mysql.sock（与安装mysql时设置有关），在sphinx.conf中取消这一行的注释即可（去掉前面的#号）：</p><pre><span style=\"background-color: inherit; color: rgb(153, 153, 136); font-style: italic;\">#sql_sock                = /tmp/mysql.sock</span></pre><p>然后重新创建索引。 执行查询</p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx/bin/search test</pre><p>可能会爆出以下错误</p><pre><span style=\"background-color: inherit; font-weight: bold;\">index</span> <span style=\"background-color: inherit; color: rgb(221, 17, 68);\">\'test1\'</span>: search error: query too complex, <span style=\"background-color: inherit; font-weight: bold;\">not</span> enough stack (thread_stack=-<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">2665032</span>K <span style=\"background-color: inherit; font-weight: bold;\">or</span> higher required).</pre><p>注释掉配置文件中下面这行,然后重试</p><pre>#sql_query_info         = <span style=\"background-color: inherit; font-weight: bold;\">SELECT</span> * <span style=\"background-color: inherit; font-weight: bold;\">FROM</span> documents <span style=\"background-color: inherit; font-weight: bold;\">WHERE</span> id=$id</pre><p>后台启动searchd的命令</p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx/bin/searchd</pre><p>然后运行php文件test.php</p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> php /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx/api/test.php test</pre><p>参考查询结果</p><pre>Query <span style=\"background-color: inherit; color: rgb(221, 17, 68);\">\'test \'</span> retrieved 3 of 3 matches <span style=\"background-color: inherit; font-weight: bold;\">in</span> 0.000 sec.\r\nQuery stats:\r\n  <span style=\"background-color: inherit; color: rgb(221, 17, 68);\">\'test\'</span> found 10 times <span style=\"background-color: inherit; font-weight: bold;\">in</span> 6 documents\r\n\r\nMatches:\r\n1. doc_id=1, weight=101, group_id=1, date_added=2014-08-27 12:15:20\r\n2. doc_id=2, weight=101, group_id=1, date_added=2014-08-27 12:15:20\r\n3. doc_id=4, weight=1, group_id=2, date_added=2014-08-27 12:15:20</pre><p><strong>4、安转Coreseek</strong></p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>tar coreseek-<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">3.2</span>.<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">14</span>.tar.gz</pre><p>会解压出：csft-3.2.14 mmseg-3.2.14 README.txt testpack 先来安装</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>cd mmseg3.<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">2.14</span>\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>.<span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/configure --prefix=/usr</span><span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/local/mmseg</span></pre><p><font color=\"#ff0000\">注:需提前创建mmseg文件夹并授权777 可能会爆出如下错误（*没错出错了)</font></p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>config.<span style=\"background-color: inherit; color: rgb(153, 0, 115);\">status:</span> <span style=\"background-color: inherit; color: rgb(153, 0, 115);\">error:</span> cannot find input <span style=\"background-color: inherit; color: rgb(153, 0, 115);\">file:</span> src/Makefile.<span style=\"background-color: inherit; font-weight: bold;\">in</span></pre><p><font color=\"#ff0000\">解决方案（解决方法正确）</font></p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo apt-get install automake\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>aclocal\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>libtoolize --force \r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>automake --add-missing\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>autoconf\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>autoheader\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>make clean</pre><p><font color=\"#ff0000\">然后重新安装（重新安装成功）</font></p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo .<span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/configure --prefix=/usr</span><span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/local/mmseg</span>\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo make &amp;&amp; make install</pre><p>安装coreseek（出错）//gcc版本太高，无法通过编译解决办法：</p><p><strong>解决方案：</strong></p><p>&nbsp; &nbsp; &nbsp;1. 在 csft-4.1/buildconf.sh 文件中，查找</p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>&amp;&amp;&nbsp;aclocal&nbsp;\\&nbsp;&nbsp;</li></ol><p>&nbsp; &nbsp; &nbsp;后加上<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>&amp;&amp;&nbsp;automake&nbsp;--add-missing&nbsp;\\&nbsp;&nbsp;</li></ol><p><br>&nbsp; &nbsp; &nbsp;2. 在 csft-4.1/configure.ac 文件中，查找：<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>AM_INIT_AUTOMAKE([-Wall&nbsp;-Werror&nbsp;foreign])&nbsp;&nbsp;</li></ol><p>&nbsp; &nbsp; &nbsp;改为：<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>AM_INIT_AUTOMAKE([-Wall&nbsp;foreign])&nbsp;&nbsp;</li></ol><p><br>&nbsp; &nbsp; &nbsp;查找：<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>AC_PROG_RANLIB&nbsp;&nbsp;&nbsp;</li></ol><p>&nbsp; &nbsp; &nbsp;后面加上<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>AM_PROG_AR&nbsp;&nbsp;</li></ol><p><br>&nbsp; &nbsp; &nbsp; 3. 最后，在 csft-4.1/src/sphinxexpr.cpp 文件中，&nbsp;替换所有：<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>T&nbsp;val&nbsp;=&nbsp;ExprEval&nbsp;(&nbsp;this-&gt;m_pArg,&nbsp;tMatch&nbsp;);&nbsp;&nbsp;</li></ol><p>&nbsp; &nbsp; &nbsp; 成为：<br></p><p><b>[plain]</b>&nbsp;<a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">view plain</a><a href=\"http://blog.csdn.net/jcjc918/article/details/39032689#\">copy</a></p><ol><li>T&nbsp;val&nbsp;=&nbsp;this-&gt;ExprEval&nbsp;(&nbsp;this-&gt;m_pArg,&nbsp;tMatch&nbsp;);&nbsp;&nbsp;</li></ol><p>&nbsp; &nbsp; &nbsp; 最后的最后，再次献上我的膝盖......</p><pre>$ cd csft-3.2.14\r\n$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> sh buildconf.sh\r\n$ sudo ./configure --prefix=/usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/coreseek --<span style=\"background-color: inherit; font-weight: bold;\">with</span>-mmseg=/usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/mmseg/ --<span style=\"background-color: inherit; font-weight: bold;\">with</span>-mmseg-includes=/usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/mmseg/include/mmseg/ --<span style=\"background-color: inherit; font-weight: bold;\">with</span>-mmseg-libs=/usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/mmseg/lib/ \r\n$ sudo make &amp;&amp; make install</pre><p>生成配置文件</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>cd /usr/local/coreseek/etc\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo cp sphinx.conf.dist csft.conf</pre><p>这里同样把example.sql导入数据库，然后修改csft.conf</p><p><strong>5、安装php扩展sphinx</strong></p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> pecl install sphinx</pre><p>可能会爆出如下错误：</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span><span style=\"background-color: inherit; color: rgb(153, 0, 115);\">configure:</span> <span style=\"background-color: inherit; color: rgb(153, 0, 115);\">error:</span> Cannot find libsphinxclient headers</pre><p>需要安装libsphinxclient</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>cd coreseek-<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">3.2</span>.<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">14</span>/csft-<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">3.2</span>.<span style=\"background-color: inherit; color: rgb(0, 153, 153);\">14</span>/api/libsphinxclient/\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>.<span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/configure --prefix=/usr</span><span style=\"background-color: inherit; color: rgb(0, 153, 38);\">/local/libsphinxclient</span>\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo make &amp;&amp; make install</pre><p>注：同样需要提前创建libsphinxclient文件夹并授权。</p><p>然后重新安装，注意安装过程中需要填写libsphinxclient安装目录。</p><p>安装完成后配置php，然后重启apache或nginx</p><pre><span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>echo <span style=\"background-color: inherit; color: rgb(221, 17, 68);\">\"extension=sphinx.so\"</span> | sudo tee /etc/php5/conf.d/sphinx.ini\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo service apache2 restart\r\n<span style=\"background-color: inherit; color: rgb(0, 128, 128);\">$ </span>sudo service nginx reload</pre><p><strong>6、使用sphinx需要的东西</strong></p><p>1、要有数据，数据库或其他类型的都可以。</p><p>2、建立sphinx配置文件。</p><p>3、生成索引。</p><p>4、启动searchd进程，默认端口9312。</p><p>5、用脚本语言（python，php）去连接sphinx服务。</p><p><strong>7、启动searchd</strong></p><pre>$ su<span style=\"background-color: inherit; font-weight: bold;\">do</span> /usr/<span style=\"background-color: inherit; font-weight: bold;\">local</span>/sphinx/bin/searchd</pre><p>searchd 命令参数介绍：</p><p>-c 指定配置文件</p><p>–stop 停止服务</p><p>–pidfile 用来显式指定一个 PID 文件</p><p>-p 指定端口</p><p><a href=\"http://www.linuxidc.com/Linux/2013-03/81021.htm\">http://www.linuxidc.com/Linux/2013-03/81021.htm</a></p><p><a href=\"http://www.coreseek.cn/forum/2_756_0.html\">http://www.coreseek.cn/forum/2_756_0.html</a></p><p><a href=\"http://arloe.blog.163.com/blog/static/122995047200963152827991/\">http://arloe.blog.163.com/blog/static/122995047200963152827991/</a></p><p><a href=\"http://www.coreseek.cn/products-install/install_on_bsd_linux/\">http://www.coreseek.cn/products-install/install_on_bsd_linux/</a></p>','article','','sphinx coreseek ubuntu',49,0,0,1418271111,'2014-12-10 23:11:51'),(13,1,NULL,'螃蟹在晨跑','秒杀活动，解决方案','add','<p>库存问题一直是电子商务一个头疼的话题，我们开始做网上销售商品时也经常遇到库存为负，出现超卖的问题，相信很多人也遇到过，特别是秒杀活动中．防止这个问题首先要在mysql操作前拦掉一些并发，如用Beanstalkd之类的队列工具，这里只说下mysql层面怎么防止超卖．</p><p>乐观锁</p><p>#buy_num# : 购买数</p><p>#id# : 商品id<br>update table set quantity=quantity - #buy_num# where id = #id# and&nbsp;quantity &gt;= #buy_num#;<br></p><p>关键点在where里的quantity &gt;= #buy_num#，这样只有库存大于等于购买数的时候才能执行成功．从而避免了库存出现负数</p>','article','','秒杀 乐观锁 电商',44,0,0,1419240004,'2014-12-22 04:20:04'),(14,1,NULL,'螃蟹在晨跑','url签名(sign)设计','code','<pre class=\"lang-html\" data-lang=\"html\">签名算法：\r\nurl = htpp://www.xxx.com/api/test?_token=123243&amp;sign=12312312&amp;id=1&amp;divce=android&amp;xx=ssss\r\n\r\nsign组成部分：\r\n(1) 版本号 version = 1.0 算法版本用以迭代版本时区分\r\n(2) url部分\r\n	url查询部分 去除sign部分即_token=123243&amp;id=1&amp;divce=android&amp;xx=ssss 取MD5(_token=123243&amp;id=1&amp;divce=android&amp;xx=ssss) 截取前16位;\r\n(3) 秘钥部分\r\n	秘钥 screkey = \'23ahjczkq\';(举例) MD5() 截取取后16位\r\n(4)时间戳 请求时效 防止伪造请求\r\n例如：\r\n   &amp;sign=1.0b48850cc4cc531e88e37d70c8c6dcf3b1421653280 \r\n   解析为：\r\n   &amp;sign= (1.0)[版本号](b48850cc4cc531e8[Url部分md5])(8e37d70c8c6dcf3b[秘钥部分md5])(1421653280[时间戳])\r\n</pre>','article','','sign 签名',8,0,0,1421814126,'2015-01-20 23:22:06'),(15,1,NULL,'螃蟹在晨跑','url签名(sign)设计','code','<pre class=\"lang-html\" data-lang=\"html\">签名算法：\r\nurl = htpp://www.xxx.com/api/test?_token=123243&sign=12312312&id=1&divce=android&xx=ssss\r\n\r\nsign组成部分：\r\n(1) 版本号 version = 1.0 算法版本用以迭代版本时区分\r\n(2) url部分\r\n    url查询部分 去除sign部分即_token=123243&id=1&divce=android&xx=ssss 取MD5(_token=123243&id=1&divce=android&xx=ssss) 截取前16位;\r\n(3) 秘钥部分\r\n    秘钥 screkey = \'23ahjczkq\';(举例) MD5() 截取取后16位\r\n(4)时间戳 请求时效 防止伪造请求\r\n例如：\r\n   &sign=1.0b48850cc4cc531e88e37d70c8c6dcf3b1421653280 \r\n   解析为：\r\n   &sign= (1.0)[版本号](b48850cc4cc531e8[Url部分md5])(8e37d70c8c6dcf3b[秘钥部分md5])(1421653280[时间戳])\r\n</pre>','article','','sign 签名',7,0,0,1421730000,'2015-01-20 23:25:11');

/*Table structure for table `crab_comment` */

DROP TABLE IF EXISTS `crab_comment`;

CREATE TABLE `crab_comment` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `art_id` int(11) NOT NULL,
  `nickname` varchar(32) NOT NULL,
  `email` varchar(50) NOT NULL,
  `content` text NOT NULL,
  `replyto` varchar(32) DEFAULT NULL,
  `praise` int(10) unsigned NOT NULL DEFAULT '0',
  `unlike` int(10) unsigned NOT NULL DEFAULT '0',
  `user_icon` varchar(100) NOT NULL,
  `create_time` int(10) unsigned NOT NULL,
  `update` datetime NOT NULL,
  `ip` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `crab_comment` */

insert  into `crab_comment`(`id`,`art_id`,`nickname`,`email`,`content`,`replyto`,`praise`,`unlike`,`user_icon`,`create_time`,`update`,`ip`) values (1,12,'crab','craber234@sina.cn','ccccccccccccdddddddddddddddd',NULL,0,0,'/app/static/images/usericon/crab.jpg',1428681089,'2015-04-10 23:51:29',2130706433),(2,12,'crab','craber234@sina.cn','ccccccccccccdddddddddddddddd',NULL,0,0,'/app/static/images/usericon/crab.jpg',1428681091,'2015-04-10 23:51:31',2130706433),(3,12,'crab','craber234@sina.cn','ccccccccccccdddddddddddddddd',NULL,0,0,'/app/static/images/usericon/crab.jpg',1428681608,'2015-04-11 00:00:08',2130706433),(4,12,'crab','craber234@sina.cn','ccccccccccccdddddddddddddddd',NULL,0,0,'/app/static/images/usericon/crab.jpg',1428681631,'2015-04-11 00:00:31',2130706433);

/*Table structure for table `crab_imuser` */

DROP TABLE IF EXISTS `crab_imuser`;

CREATE TABLE `crab_imuser` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `uid` char(32) NOT NULL,
  `username` varchar(32) NOT NULL,
  `password` varchar(33) NOT NULL,
  `avatar` varchar(255) NOT NULL,
  `ip` int(11) NOT NULL,
  `token` char(37) NOT NULL,
  `expire_in` int(11) NOT NULL DEFAULT '0',
  `create_time` int(11) NOT NULL,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `crab_imuser` */

insert  into `crab_imuser`(`id`,`uid`,`username`,`password`,`avatar`,`ip`,`token`,`expire_in`,`create_time`,`update_time`) values (1,'crab5520e4cb857e1','crab','4297f44b13955235245b2497399d7a93','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428219083,'2015-04-05 15:31:23'),(2,'crab5520efbcdc0b3','123123','4297f44b13955235245b2497399d7a93','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428221884,'2015-04-05 16:18:04'),(3,'crab5520ffcba2bca','123','202cb962ac59075b964b07152d234b70','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428225995,'2015-04-05 17:26:35'),(4,'crab552227cd0c35a','annapatio','4297f44b13955235245b2497399d7a93','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428301773,'2015-04-06 14:29:33'),(5,'crab5522333445afa','superSB','4297f44b13955235245b2497399d7a93','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428304692,'2015-04-06 15:18:12'),(6,'crab55225561b6c96','螃蟹','4297f44b13955235245b2497399d7a93','http://www.uandc.cn/app/static/images/usericon/crab.jpg',123,'1.0.0807d0d927dcd098081ac75d6a4f77c94',0,1428313441,'2015-04-06 17:44:01');

/*Table structure for table `crab_user` */

DROP TABLE IF EXISTS `crab_user`;

CREATE TABLE `crab_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `password` char(32) NOT NULL,
  `email` varchar(50) NOT NULL,
  `phone` int(11) NOT NULL,
  `desc` varchar(255) NOT NULL,
  `pwd_hash` char(32) NOT NULL,
  `ip` int(11) NOT NULL DEFAULT '0',
  `login_num` int(11) NOT NULL DEFAULT '0',
  `last_login` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `crab_user` */

insert  into `crab_user`(`id`,`username`,`password`,`email`,`phone`,`desc`,`pwd_hash`,`ip`,`login_num`,`last_login`) values (1,'crab','551a014f8d768ff0948cbc17954dfd19','email',110,'一个有钳人','crab_running',2130706433,10,1427522035);

/*Table structure for table `crab_usericon` */

DROP TABLE IF EXISTS `crab_usericon`;

CREATE TABLE `crab_usericon` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `img_name` varchar(20) DEFAULT NULL,
  `img_path` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `crab_usericon` */

insert  into `crab_usericon`(`id`,`img_name`,`img_path`) values (1,'admin','/app/static/images/usericon/crab.jpg');

/*Table structure for table `crab_visit_log` */

DROP TABLE IF EXISTS `crab_visit_log`;

CREATE TABLE `crab_visit_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ip` int(10) unsigned zerofill NOT NULL,
  `user_agent` varchar(255) DEFAULT NULL,
  `search` varchar(32) NOT NULL,
  `visit_num` int(10) unsigned zerofill NOT NULL,
  `create_time` int(10) unsigned zerofill NOT NULL,
  `update` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `crab_visit_log` */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
